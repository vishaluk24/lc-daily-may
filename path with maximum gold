class Solution {
public:
    int m;
    int n;
    vector<vector<int>> direction{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    
int solve(int i, int j, vector<vector<int>>& grid, int sum) {
    if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0) {
        return sum;
    }
    int ans = 0;
    int temp = grid[i][j];
    grid[i][j] = 0;
    for (auto& dir : direction) {
        int i_ = i + dir[0];
        int j_ = j + dir[1];
        ans = max(ans, solve(i_, j_, grid, sum + temp));
    }
    grid[i][j] = temp;
    return ans;
}

    
    int getMaximumGold(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        int result=0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) {
                   result=  max(result,solve(i, j, grid, 0));
                }
            }
        }
        return result;
    }
};
